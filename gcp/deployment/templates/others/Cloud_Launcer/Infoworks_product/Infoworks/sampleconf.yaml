resources:
- name: {{ name }}
  type: vm_instance.py
  properties:
    instanceName: {{ instanceName }}
    sourceImage: https://www.googleapis.com/compute/v1/projects/dataproctest2/global/images/edgenode-dataproc
    zone: {{ zone }}
      machineType: https://www.googleapis.com/compute/v1/projects/dataproctest2/zones/us-central1-f/machineTypes/n1-standard-2
      network: {{ network }}
      {% if subnetwork %}
      subnetwork: {{ subnetwork }}
      {% endif %}
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      hasExternalIP: {{ hasExternalIP }}
      serviceAccounts:
        - email: default
          scopes:
            - 'https://www.googleapis.com/auth/cloud.useraccounts.readonly'
            - 'https://www.googleapis.com/auth/devstorage.read_only'
            - 'https://www.googleapis.com/auth/logging.write'
            - 'https://www.googleapis.com/auth/monitoring.write'
            - 'https://www.googleapis.com/auth/cloudruntimeconfig'
      metadata:
        items:
          - key: bitnami-base-password
            value: $(ref.generated-password-0.password)
          - key: startup-script
            value: |
              #!/bin/bash
              wget http://repos.sakhaglobal.com/saikrishna/infowork/raw/master/cluster-setup.sh
              bash cluster-setup.sh
              rm -rf cluster-setup.sh
          {% if enableStatusWaiter %}
          - key: status-config-url
            value: $(ref.software-status.config-url)
          - key: status-variable-path
            value: $(ref.software-status.variable-path)
          - key: status-uptime-deadline
            value: 420
          {% endif %}
      tags:
        items:
          - {{ deployment }}-tcp-80
          - {{ deployment }}-tcp-443
  - name: generated-password-0
    type: password.py
    properties:
      length: 8
      includeSymbols: False
  {% if enableStatusWaiter %}
  - name: software-status
    type: software_status.py
    properties:
      timeout: 480
      waiterDependsOn:
        - {{ instanceName }}
  - name: software-status-script
    type: software_status_script.py
    properties:
      checkScript: |-
        failed=$(/etc/init.d/bitnami status \
            | grep "not running" | cut -d" " -f1 | tr "\n" " ")
        if [ ! -z "$failed" ]; then
          echo "Processes failed to start: $failed"
          exit 1
        fi
  {% endif %}
  {% if properties["enableTcp80"] %}
  - name: {{ deployment }}-tcp-80
    type: compute.v1.firewall
    properties:
      network: {{ network }}
      {% if properties.get("tcp80SourceRanges") %}
      {% set sources = properties["tcp80SourceRanges"].split(',') %}
      {% set comma = joiner(', ') %}
      sourceRanges: [{% for s in sources %}{{ comma() }}"{{ s.strip() }}"{% endfor %}]
      {% else %}
      sourceRanges: ["0.0.0.0/0"]
      {% endif %}
      targetTags: ["{{ deployment }}-tcp-80"]
      allowed:
        - IPProtocol: TCP
          ports: ["80"]
  {% endif %}
  {% if properties["enableTcp443"] %}
  - name: {{ deployment }}-tcp-443
    type: compute.v1.firewall
    properties:
      network: {{ network }}
      {% if properties.get("tcp443SourceRanges") %}
      {% set sources = properties["tcp443SourceRanges"].split(',') %}
      {% set comma = joiner(', ') %}
      sourceRanges: [{% for s in sources %}{{ comma() }}"{{ s.strip() }}"{% endfor %}]
      {% else %}
      sourceRanges: ["0.0.0.0/0"]
      {% endif %}
      targetTags: ["{{ deployment }}-tcp-443"]
      allowed:
        - IPProtocol: TCP
          ports: ["443"]
  {% endif %}

outputs:
  - name: deployment
    value: {{ deployment }}
  - name: password0
    value: $(ref.generated-password-0.password)
  - name: project
    value: {{ project }}
  - name: vmId
    value: $(ref.{{ instanceName }}.id)
  - name: vmInternalIP
    value: $(ref.{{ name }}.internalIP)
  - name: vmName
    value: {{ instanceName }}
  - name: vmSelfLink
    value: $(ref.{{ instanceName }}.selfLink)