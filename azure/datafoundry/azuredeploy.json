{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for the resources."
            }
        },
        "virtualNetworkNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "Determines whether or not a new virtual network should be provisioned."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "datafoundry-vnet",
            "metadata": {
                "description": "Name of the virtual network"
            }
        },
        "addressPrefixes": {
            "type": "array",
            "defaultValue": [
                "10.30.0.0/16"
            ],
            "metadata": {
                "description": "Address prefix of the virtual network"
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "default",
            "metadata": {
                "description": "Name of the subnet"
            }
        },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.30.0.0/29",
            "metadata": {
                "description": "Subnet prefix of the virtual network"
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "databrickstoken": {
            "type": "string",
            "defaultValue": "https://adb-4134742693736709.9.azuredatabricks.net",
            "metadata": {
                "description": "Databricks Workspace Token"
            }
        },
        "databricksurl": {
            "type": "string",
            "defaultValue": "dapi814c61712794ec8818b297b85d149255",
            "metadata": {
                "description": "Databricks Workspace URL"
            }
        },
        "vmName": {
            "type": "string",
            "defaultValue": "infoworks-datafoundry",
            "metadata": {
                "description": "Name for the Infoworks DF VM."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "infoworks",
            "metadata": {
                "description": "User name for the Infoworks DF VM."
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Infoworks DF VM."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "defaultValue": "IN11**rk1234",
            "metadata": {
                "description": "Password or ssh key for the Infoworks DF VM."
            }
        },
        "publicIpNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "Determines whether or not a new public ip should be provisioned."
            }
        },
        "publicIpName": {
            "type": "string",
            "defaultValue": "PublicIp",
            "metadata": {
                "description": "Name of the public ip address"
            }
        },
        "publicIpDns": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "DNS of the public ip address for the VM"
            }
        },
        "publicIpResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group for the public ip address"
            }
        },
        "publicIpAllocationMethod": {
            "type": "string",
            "defaultValue": "Dynamic",
            "allowedValues": [
                "Dynamic",
                "Static"
            ],
            "metadata": {
                "description": "Allocation method for the public ip address"
            }
        },
        "publicIpSku": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "Name of the resource group for the public ip address"
            }
        },
        "dfVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "DF Version"
            }
        },
        "dfVmsize": {
            "type": "string",
            "defaultValue": "Standard_D3_v2",
            "metadata": {
                "description": "Size for the Infoworks DF VM."
            }
        },
        "DbnodeVmsize": {
            "type": "string",
            "defaultValue": "Standard_D3_v2",
            "metadata": {
                "description": "Size for the Databricks VM."
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            },
            "defaultValue": "[deployment().properties.templateLink.uri]"
            },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
            },
            "defaultValue": ""
        }
    },
    "variables": {
        "publicIpAddressId": {
            "id": "[resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
        },
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        },
        "extensionName": "[concat(parameters('vmName'), '-app')]",
        "networkSecurityGroupName": "[concat(parameters('vmName'), '-datafoundrynsg-', uniqueString(resourceGroup().id))]",
        "nicName": "[concat(parameters('vmName'), '-datafoundrynic-', uniqueString(resourceGroup().id))]",
        "publicIpDns": "[concat('datafoundrydns-', uniqueString(resourceGroup().id))]",
        "osDisk": "StandardSSD_LRS",
        "scriptName": "dummy.sh"
    },
    "resources": [
        {
            "apiVersion": "2018-02-01",
            "name": "pid-e949b897-22d2-5d93-8963-9231998011bf",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "resources": []
                }
            }
        },
        {
            "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-02-01",
            "name": "[parameters('publicIpName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('publicIpSku')]"
            },
            "properties": {
                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('publicIpDns')]"
                }
            }
        },
        {
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('addressPrefixes')]"
                },
                "subnets": [
                {
                    "name": "[parameters('subnetName')]",
                    "properties": {
                        "addressPrefix": "[parameters('subnetPrefix')]"
                    }
                }
                ]
            }
        },
        {
            "name": "[variables('networkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-02-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-datafoundry-ports",
                        "properties": {
                            "priority": 1010,
                            "sourceAddressPrefix": "*",
                            "protocol": "Tcp",
                            "destinationPortRanges": [
                                "3000",
                                "3030",
                                "3020"
                            ],
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[parameters('publicIpName')]",
                "[variables('networkSecurityGroupName')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]"
                            },

                            "publicIPAddress": "[if(not(equals(parameters('publicIpNewOrExisting'), 'none')), variables('publicIpAddressId') , json('null'))]"
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[parameters('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('nicName')]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('dfVmsize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "iwnamespace",
                        "offer": "datafoundry-for-databricks-vm",
                        "sku": "datafoundry-for-databricks-azure-vm",
                        "version": "[parameters('dfVersion')]"
                    },
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('osDisk')]"
                        }
                    },
                    "dataDisks": [
                        {
                            "lun": "0",
                            "createOption": "fromImage",
                            "caching": "ReadOnly",
                            "managedDisk": {
                                "storageAccountType": "[variables('osDisk')]"
                            }
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                        }
                    ]
                }
            },
            "plan": {
                "name": "datafoundry-for-databricks-azure-vm",
                "publisher": "iwnamespace",
                "product": "datafoundry-for-databricks-vm"
            },
            "resources": [
                {
                    "type": "extensions",
                    "apiVersion": "2019-07-01",
                    "name": "[variables('extensionName')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('vmName')))]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "https://raw.githubusercontent.com/Infoworks/deployments/master/azure/hdinsight/scripts/dummy.sh"
                            ]
                        },
                        "protectedSettings": {
                            "commandToExecute": "[concat('bash dummy.sh ',parameters('vmName'), ' ', parameters('DbnodeVmsize'), ' ', parameters('databricksurl'), ' ', parameters('databrickstoken'), ' ', variables('publicIpDns'))]"
                        }
                    }
                }
            ]
        }
  ],
    "outputs": {
        "dataFoundry URL": {
            "type": "string",
            "value": "[if(equals(parameters('publicIpNewOrExisting'), 'none'), 'no public ip', concat('http://', reference(resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2018-04-01').dnsSettings.fqdn, ':3000'))]"
        },
        "default username": {
            "type": "string",
            "value": "admin@infoworks.io"
        },
         "default password": {
            "type": "string",
            "value": "!fk4xPZT*EPT=Yc^q"
        },
        "ssh command": {
            "type": "string",
            "value": "[if(equals(parameters('publicIpNewOrExisting'), 'none'), 'no public ip', concat('ssh ', parameters('adminUsername'), '@', reference(resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2018-04-01').dnsSettings.fqdn))]"
        },
        "for license contact": {
            "type": "string",
            "value": "sales@infoworks.io"
        },
        "for support contact": {
            "type": "string",
            "value": "support@infoworks.io"
        }
    }
}
